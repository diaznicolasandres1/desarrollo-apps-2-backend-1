{
  "name": "Recomendaciones en base a eventos previos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "recomendation",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "af4f3783-4df5-4f43-a841-10a128a35c15",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -16,
        -64
      ],
      "webhookId": "webhook-trigger-id"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const userId = $json.body.userId;\nreturn {\n  chatInput: `El usuario con ID ${userId} necesita recomendaciones de eventos culturales.\n\nUSA LAS HERRAMIENTAS:\n1. Get User Tickets con userId: ${userId}\n2. Get Event Details para eventos del historial\n3. Get Active Events para ver opciones disponibles\n4. Recomienda eventos similares EXCLUYENDO donde ya tiene tickets`\n};"
      },
      "id": "c8e431c4-bf55-47c8-abae-dbb7623573a7",
      "name": "Format Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        -64
      ]
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "Eres un experto en recomendaciones de eventos culturales. Tienes herramientas para consultar APIs. REGLAS: 1) Siempre usa las herramientas cuando te den un userId. 2) NUNCA recomiendes eventos donde el usuario ya tiene tickets. 3) Analiza preferencias del historial de eventos a los que asistio el usuario. 4) Responde solo con recomendaciones finales en formato JSON siendo una lista de los eventos (mismo formato que el json que responde la api de eventos) si por alguna razon no pudiste pegarle a una api y realizar el proceso devolve una lista vacia.\nProcedimiento:\nBuscar los eventos ids de eventos que fue el usuario\nBuscar cada uno de los eventos para ver de que eran.\nBuscar eventos actuales disponibles y ver cuales se asemejan a los que asistio el usuario\n"
        }
      },
      "id": "6222a0a2-b4e4-4049-bb6a-2bb787ad1a1e",
      "name": "AI Recommendation Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        464,
        -64
      ]
    },
    {
      "parameters": {
        "toolDescription": "Obtiene la lista de eventos (tickets) que previamente asistio un usuario",
        "url": "=https://desarrollo-apps2-back-end.vercel.app/api/v1/tickets/user/{{ $fromAI('userId', 'ID del usuario para obtener sus tickets', 'string')}}",
        "options": {}
      },
      "id": "f84e82f6-524d-4246-936e-63b7ac66cd07",
      "name": "Get User Tickets",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        448,
        240
      ]
    },
    {
      "parameters": {
        "toolDescription": "A partir del parametro eventId puede buscarse la informacion relacionada a ese evento",
        "url": "=https://desarrollo-apps2-back-end.vercel.app/api/v1/events/{{ $fromAI('eventId', 'ID del evento/ticket para obtener su informacion', 'string')}}",
        "options": {}
      },
      "id": "a7f42d59-e818-4482-97ef-a03b606f8da0",
      "name": "Get Event Details",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        608,
        160
      ]
    },
    {
      "parameters": {
        "toolDescription": "Obtiene información de un lugar cultural por su ID",
        "url": "https://desarrollo-apps2-back-end.vercel.app/api/v1/cultural-places/{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('placeId', 'ID del lugar cultural para obtener su información', 'string') }}",
        "options": {}
      },
      "id": "b4bc16ae-8b1d-49e9-9f39-58c742fa72d8",
      "name": "Get Cultural Place",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        800,
        80
      ]
    },
    {
      "parameters": {
        "toolDescription": "Obtiene todos los eventos activos disponibles",
        "url": "https://desarrollo-apps2-back-end.vercel.app/api/v1/events/active",
        "options": {}
      },
      "id": "40094dd2-3a22-4458-8b4c-7045dcb3e3e9",
      "name": "Get Active Events",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        736,
        224
      ]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "16d752af-a366-4f03-a526-cfaf63069ea1",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        816,
        -64
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        240,
        224
      ],
      "id": "5612f3d4-18d8-41c3-9d8c-9129ecb229db",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "FuBzr7vBsORJ9cMi",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Format Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Prompt": {
      "main": [
        [
          {
            "node": "AI Recommendation Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cultural Place": {
      "ai_tool": [
        [
          {
            "node": "AI Recommendation Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Events": {
      "ai_tool": [
        [
          {
            "node": "AI Recommendation Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Event Details": {
      "ai_tool": [
        [
          {
            "node": "AI Recommendation Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get User Tickets": {
      "ai_tool": [
        [
          {
            "node": "AI Recommendation Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Recommendation Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Recommendation Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "20de8627-42ce-4a0d-9ca3-584540dbce33",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6f088f0f7ddceceefafa4b902423f0f6520285bc2483a80e3b3e772125fa1a92"
  },
  "id": "awzy2K1EnGGlYg2E",
  "tags": []
}